mga = html("http://www.wuxiaworld.com/mga-index/mga-chapter-2059/")
library("rvest")
mga = html("http://www.wuxiaworld.com/mga-index/mga-chapter-2059/")
mga = read_html("http://www.wuxiaworld.com/mga-index/mga-chapter-2059/")
mga%>%html_node("header h1")%>%html_text()
mga%>%html_node("header h1 entry-title")%>%html_text()
mga%>%html_node("article header h1")%>%html_text()
mga%>%html_node("article p strong")%>%html_text()
mga%>%html_node("#articlebody p")%>%html_text()
mga%>%html_node("article #articlebody p")%>%html_text()
mga%>%html_node("article p")%>%html_text()
mga%>%html_node("article #articlebody")%>%html_text()
mga%>%html_node("#articlebody")%>%html_text()
mga%>%html_node("article .articlebody")%>%html_text()
mga%>%html_node("article div p")%>%html_text()
movie <- read_html("http://www.imdb.com/title/tt1490017/")
cast <- html_nodes(movie, "#titleCast span.itemprop")
html_text(cast)
html_name(cast)
html_attrs(cast)
html_attr(cast, "class")
install.packages("Amelia")
install.packages("shiny")
library("shiny")
library("amelia")
library("Amelia")
install.packages("Rcpp")
install.packages("Rcpp")
library("compiler", lib.loc="/usr/lib/R/library")
detach("package:compiler", unload=TRUE)
x = [1:10]
x = {1:10}
y = {2:20:2}
y = {2:2:20}
y = 2*x
plot(x,y)
plot.window(x,y)
plot.window(0,5)
plot.window(10,5)
plot.xy(x,y)
2:20
2,20
shiny::runApp('Desktop/Fun/NLP:Shiny')
library(readr)
SENSEX <- read_csv("~/Desktop/Fun/Try:Shiny/SENSEX.csv",
col_types = cols(Date = col_date(format = "%d/%m/%Y")))
View(SENSEX)
library(readr)
SENSEX <- read_csv("~/Desktop/Fun/Try:Shiny/SENSEX.csv",
col_types = cols(Date = col_date(format = "%d/%m/%Y")))
View(SENSEX)
library(readr)
SENSEX <- read_csv("~/Desktop/Fun/Try:Shiny/SENSEX.csv",
col_types = cols(Date = col_date(format = "%d/%m/%Y")),
locale = locale(date_format = "%d/%m/%Y"))
View(SENSEX)
plot((Open,High,Low,Close),Date)
plot(Date,Open)
samp=SENSEX
samp
plot(samp.Date,samp.Open)
plot(Date,Open)
samp.Date
sen = SENSEX
View(data)
View(data)
view(SENSEX)
View(SENSEX)
install.packages("ggmap")
library(RCurl)
install.packages("RCurl")
gallery = read.csv("./home/sk/Desktop/Fun/hungary.csv")
gallery = read.csv("/home/sk/Desktop/Fun/hungary.csv")
head(gallery)
typeof(gallery$Zip.PinCode)
typeof(gallery$Phone.1)
install.packages("zipcode")
library("zipcode")
data("zipcode")
gallery$Zip.PinCode = clean.zipcodes(gallery$Zip.PinCode)
gallery1 = merge(gallery, zipcode, by.x = 'Zip.Pincode', by.y = 'zip.pincode')
gallery1 = merge(gallery, zipcode, by.x = 'Zip', by.y = 'zip')
gallery1 = merge(gallery, zipcode)
gallery1 = merge(gallery, zipcode, by.x = 'Zip.Pincode', by.y = 'zip')
gallery1 = merge(gallery, zipcode, by.x = 'gallery$Zip.Pincode', by.y = 'zip')
gallery1 = merge(gallery, zipcode)
head(gallery)
head(gallery1)
View(zipcode)
install.packages("geosphere")
install.packages("rgl")
install.packages("rgl")
library(ggplot2)
stock = read.csv("SENSEX.csv")
View(zipcode)
stock = read.csv("home/sk/Desktop/Fun/Stock/SENSEX.csv")
stock = read.csv("/home/sk/Desktop/Fun/Stock/SENSEX.csv")
head(stock)
typeof(stock$Date)
typeof(stock$Open)
ggplot(da)
ggplot(data = stock, aes(stock$Open,stock$Close))
plot(x = stock$Open, y = stock$Close)
plot(x = stock$Open, y = stock$Close, xlab = "Open", ylab = "Close")
smoothScatter(x = stock$Open, y = stock$Close, main = "Stock Prices", sub = "Opening & CLosing" ,xlab = "Open", ylab = "Close")
smoothScatter(x = stock$Open, y = stock$Close, main = "Stock Prices", sub = "Opening & Closing" ,xlab = "Open", ylab = "Close")
smoothScatter(x = stock$Open, y = stock$Close, main = "Stock Prices", xlab = "Open", ylab = "Close")
library('ggplot2')
library("raster")
#library(rgdal)
library("rgeos")
library('ggplot2')
library('dplyr')
### Q1: Assam only
### Get data
india <- getData("GADM", country = "India", level = 1)
### Choose Assam
assam <- subset(india, NAME_1 == "Assam")
### SPDF to DF
map <- fortify(assam)
### Draw a map
ggplot() +
geom_map(data = map, map = map, aes(x = long, y = lat, map_id = id, group = group))
library("raster")
#library(rgdal)
library("rgeos")
library('ggplot2')
library('dplyr')
### Q1: Assam only
### Get data
india <- getData("GADM", country = "India", level = 1)
### Choose Assam
assam <- subset(india, NAME_1 == "Assam")
### SPDF to DF
map <- fortify(assam)
### Draw a map
ggplot() +
geom_map(data = map, map = map, aes(x = long, y = lat, map_id = id, group = group))
map <- fortify(india)
map$id <- as.integer(map$id)
dat <- data.frame(id = 1:(length(india@data$NAME_1)), state = india@data$NAME_1)
map_df <- inner_join(map, dat, by = "id")
centers <- data.frame(gCentroid(india, byid = TRUE))
centers$state <- dat$state
### This is hrbrmstr's own function
theme_map <- function (base_size = 12, base_family = "") {
theme_gray(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.ticks.length=unit(0.3, "lines"),
axis.ticks.margin=unit(0.5, "lines"),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.background=element_rect(fill="white", colour=NA),
legend.key=element_rect(colour="white"),
legend.key.size=unit(1.5, "lines"),
legend.position="right",
legend.text=element_text(size=rel(1.2)),
legend.title=element_text(size=rel(1.4), face="bold", hjust=0),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.margin=unit(0, "lines"),
plot.background=element_blank(),
plot.margin=unit(c(1, 1, 0.5, 0.5), "lines"),
plot.title=element_text(size=rel(1.8), face="bold", hjust=0.5),
strip.background=element_rect(fill="grey90", colour="grey50"),
strip.text.x=element_text(size=rel(0.8)),
strip.text.y=element_text(size=rel(0.8), angle=-90)
)
}
ggplot() +
geom_map(data = map_df, map = map_df,
aes(map_id = id, x = long, y = lat, group = group),
color = "#ffffff", fill = "#bbbbbb", size = 0.25) +
geom_text(data = centers, aes(label = state, x = x, y = y), size = 2) +
coord_map() +
labs(x = "", y = "", title = "India State") +
theme_map()
forest
forest = read.csv("forest.csv",header=header = TRUE)
forest = read.csv("forest.csv",header = TRUE)
setwd("~/Deskyop/Fun/Stock/Databases")
setwd("~/Deskyop/Fun/Stock/datasets")
setwd("/home/sk/Desktop/Fun/Stock/datasets")
forest = read.csv("forest.csv",header=header = TRUE)
forest = read.csv("forest.csv",header = TRUE)
forest = data.frame(forest$Actual.Forest.Cover,Dense.Forest=forest$Very.Dense.Forest+forest$Moderately.Dense.Cover,forest$Mangrove,forest$Scrub,forest$Non.Forest)
forest
forest = read.csv("forest.csv",header = TRUE)
forest = data.frame(forest$Actual.Forest.Cover,Dense.Forest=forest$Very.Dense.Forest+forest$Moderately.Dense.Cover,forest$Mangrove,forest$Scrub,forest$Non.Forest)
forest
library('reshape')
savehistory("~/Desktop/Fun/Stock/datasets/h.Rhistory")
